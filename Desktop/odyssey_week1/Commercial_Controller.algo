
        "this class creates de battery "
 DEFINE Battery USING id and numberOfColumns and minimumFloor and maximumFloor and numberOfElevatorsPerColumn
    SET Id: id,
    SET status: status,
    SET columnsList TO EMPTY

            "this sequence creates de columnlist"
    SEQUENCE createColumnsList USING numberOfColumns, numberOfElevatorsPerColumn, minimumFloor, maximumFloor
        FOR EACH numberOfColumns
            SET tempID = 1
            ADD (INSTANTIATE Column with tempID and numberOfElevatorsPerColumn and minimumFloor and maximumFloor and numberServedFloors) TO columnsList
            INCREMENT tempID by 1 
        ENDFOR
    END SEQUENCE

    CALL createColumnsList with numberOfColumns

    "Finding the number of floors for each column"
    SEQUENCE calculateNumberOfFloorsPerColumn USING numberOfColumns AND numberOfFloors AND numberOfBasements AND minimumFloor AND maximumFloor                
        if numberOfBasements is biggest than zero  
            SET numberOfFloorsPerColumn to (ROUND to FLOOR (numberOfFloors DIVIDED BY (numberOfColumns - 1)))
            SET remainingfloors to (numberOfFloors MODULO (numberOfColumns - 1))
        else
            SET numberOfFloorsPerColumn to (ROUND to FLOOR (numberOfFloors DIVIDED BY numberOfColumns))
            SET remainingfloors to (numberOfFloors MODULO numberOfColumns)
        endif

        SET minimumFloor to 1   
        if numberOfColumns is equal to 1  "if there is just one column, it serves all the floors of the building"
            SET numberServedFloors to totalNumberOfFloors 
            SET minimumFloor of column to minimumFloor  
            SET maximumFloor of column to totalNumberOfFloors  
        else 
            for each columnN in columnsList "creating column list"
                if columnN is not the first element of columnsList OR numberOfBasements is equal to zero     
                    SET numberServedFloors to numberOfFloorsPerColumn 
                    SET minimumFloor of columnN to (minimumFloor)
                    SET maximumFloor of columnN to (minimumFloor + numberOfFloorsPerColumn - 1)
                endif
                    SET minimumFloor to (maximumFloor of columnN + 1)
            endfor
            if remainingfloors is not equal to zero 
                SET maximumFloor of the last column of columnsList to maximumFloor + remainingfloors
                SET numberServedFloors to numberOfFloorsPerColumn + remainingfloors
            endif
            if numberOfBasements is bigger than zero 
                SET numberServedFloors of first column of columnsList to numberOfBasements 
                SET minimumFloor of first column of columnsList to numberOfBasements
                SET maximumFloor of first column of columnsList to 1    
            endif
        endif
    END SEQUENCE

    
    END SEQUENCE
"floor display uses battery 
tells the battery when someone uses it"

    "This sequence choses the colunm using the display "
    SEQUENCE choseColumn using floorDisplay (ButtonsDIsplayAndValue) 
         SET bestColumn to bestCOLUm
          while bestcolum is null 
            if ButtonsDIsplayAndValue is inside an element of columnsList
            bestCOLUm equal to that element 
          endwhile
          call findBestElevator    

END DEFINE

        "displayFloors class"
DEFINE floorDisplay USING numberServedFloors
    SET ButtonsDisplay to EMPTY array
    SET numberServedFloors to numberServedFLOORS

    SEQUENCE ButtonsDIsplayAndValue using numberServedFLOORS
        button pressed
        SET Buttonsdisplay to numberServedFloors
        
    END SEQUENCE

                "colunm class"
DEFINE Colunm with elevatorList and floorList
    
    SET colunm to Colunm 
    SET elevatorList to elevatorLIST array
    SET floorList to FloorLIst array


                "this sequence find the best elevator"
    SEQUENCE findBestElevator using requestedFloor and requestedirection
        SET bestElevator to 0
        SET bestScore to 100
        SET floorDistanceList to EMPTY list 
        SET difference to 0

    for each elevator in colunm elevatorLIST
        SET difference to absolute vlue of requestedFloor minus currentFLoor
        ADD difference to floorDistanceList
    endfor

SORT floorDistanceList from lowest difference to highest difference

for each elevator in elevatorLIST
    if requestedFloor equal to currentFLoor and elevator status is stop and DIrection equal requestedirection
        SET bestScore to 1 

    else if currentFLoor is bigger than requestedFloor and elevator status is moving and DIrection equal to requestedirection
        SET bestScore to 2

    else if  currentFLoor if lesser than requestedFloor and elevator status is moving and DIrection equal ti requestedirection
        SET bestScore to 2

    else if currentFLoor is bigger than requestedFloor and elevator status is idle and this elevator in floorDistanceList is lesser than the others
        SET bestScore to 3

    else if currentFLoor is lesser than requestedFloor and elevator status is idle and this elevator in floorDistanceList is lesser than the others
        SET bestScore to 3

    else if currentFLoor is bigger than requestedFloor and elevator status is moving and direction not equal to requestedirection 
        SET bestScore to 4 

    else if currentFLoor is lesser than requestedFloor and elevator status is moving and direction not equal to requestedirection 
        SET bestScore to 4 

    else if elevator status is idle 
        SET bestScore to 5
    end if
end for

SORT elevatorLIST from lowest bestScore to highest bestScore
    SET bestElevator to elevator that got the lower bestScore
    return bestElevator
END SEQUENCE    
            "  this class request the elevator "
SEQUENCE requestElevator using currentFLoor and DIrection 
    SET ThechosenElevator to call findBestElevator with currentFLoor and DIrection

    add currentFLoor to floorRequestList 

    call  moveElevator with ThechosenElevator
    return ThechosenElevator

END DEFINE
    "Doors class"
DEFINE Doors

        "this sequence open the door"
    SEQUENCE openDoors
       doorsOpen equal true
        open doors 
        wait 10 seconds
         call closeDoors
         
    END SEQUENCE        
        "this one closes the doors"
    SEQUENCE closeDoors
        SET doorsOpen equal false
        closedoors 
    END SEQUENCE

    


END DEFINE 
        "the elevator class"
DEFINE Elevator using elevatorId and currentFloor
    SET elevatorId to elevatorID
    SET status to idle 
    SET currentFloor to currentFloor
    SET direction to DIrection
    SET floorRequestList to EMPTY list


        "this is the class the moves the elevator"
    SEQUENCE moveElevator
        while floorRequestList equal not EMPTY
            for each floor inside floorRequest
              if currentFLoor is lesser than first element in floorRequestList 
                set DIrection to up
                if doors open equal true 
                    call closeDoors
            endif
            set status to moving

            'moving up until there'
                while currentFLoor is lesser than first element in floorRequestList
                    increment currentFLoor by 1
                endwhile

                call openDoors
                SET status to stop
                call closeDoors
               else if currentFLoor is bigger than first element in floorRequestList
               SET DIrection to down
                if doors open equal true
                    call closeDoors
                endif
                SET status to moving   

                 'moving down until there'

                while currentFLoor is bigger than first element in floorRequestList
                    decrement currentFLoor by 1
                endwhile

                call openDoors
                SET status to stop
                call closeDoors
            endif

            REMOVE first element in floorRequestList
           endfor
        endwhile           
        set status to idle
     END SEQUENCE 
            "this sequence puts the floors in the request list"
     SEQUENCE requestedFloor USING floor
     add floor to floorRequestList
     END SEQUENCE

     
         

END DEFINE


            "this class defines the call button"
DEFINE CallButton USING and direction and callButtonValue
        SET callButtonValue to callButtonVALUE 
        SET direction to directioN

    SEQUENCE calculateButton using requestedFloor
        SET callButtonVALUE to requestedFloor
        
        return callButtonVALUE
    END SEQUENCE 

    SEQUENCE callButtonPressed USING callButtonVALUE and directioN
        button pressed
        SET bestELE call colunm requestElevator with callButtonVALUE and directioN
        return bestELE
    END SEQUENCE
END DEFINE

            "this one defines the rquest button"
DEFINE FloorRequestButton USING requestedFloor 
    SET ButtonRequestedFloor to requestedFloor

    SEQUENCE requestButtonPressed USING ButtonRequestedFloor
    button pressed
    call requestedFloor with ButtonRequestedFloor 
    call moveElevator
    END SEQUENCE
END DEFINE